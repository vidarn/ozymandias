# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ozymandias', [dirname(__file__)])
        except ImportError:
            import _ozymandias
            return _ozymandias
        if fp is not None:
            try:
                _mod = imp.load_module('_ozymandias', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ozymandias = swig_import_helper()
    del swig_import_helper
else:
    import _ozymandias
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_ozymandias.OZY_PROGRESS_RENDER_BEGIN_swigconstant(_ozymandias)
OZY_PROGRESS_RENDER_BEGIN = _ozymandias.OZY_PROGRESS_RENDER_BEGIN

_ozymandias.OZY_PROGRESS_BUCKET_DONE_swigconstant(_ozymandias)
OZY_PROGRESS_BUCKET_DONE = _ozymandias.OZY_PROGRESS_BUCKET_DONE

_ozymandias.OZY_PROGRESS_RENDER_DONE_swigconstant(_ozymandias)
OZY_PROGRESS_RENDER_DONE = _ozymandias.OZY_PROGRESS_RENDER_DONE

_ozymandias.PASS_FINAL_swigconstant(_ozymandias)
PASS_FINAL = _ozymandias.PASS_FINAL

_ozymandias.PASS_NORMAL_swigconstant(_ozymandias)
PASS_NORMAL = _ozymandias.PASS_NORMAL

_ozymandias.PASS_COLOR_swigconstant(_ozymandias)
PASS_COLOR = _ozymandias.PASS_COLOR

_ozymandias.PASS_DEPTH_swigconstant(_ozymandias)
PASS_DEPTH = _ozymandias.PASS_DEPTH

_ozymandias.PASS_COUNT_swigconstant(_ozymandias)
PASS_COUNT = _ozymandias.PASS_COUNT

_ozymandias.OZY_COLORSPACE_LINEAR_swigconstant(_ozymandias)
OZY_COLORSPACE_LINEAR = _ozymandias.OZY_COLORSPACE_LINEAR

_ozymandias.OZY_COLORSPACE_SRGB_swigconstant(_ozymandias)
OZY_COLORSPACE_SRGB = _ozymandias.OZY_COLORSPACE_SRGB

_ozymandias.UNKNOWN_swigconstant(_ozymandias)
UNKNOWN = _ozymandias.UNKNOWN

_ozymandias.NONE_swigconstant(_ozymandias)
NONE = _ozymandias.NONE

_ozymandias.UCHAR_swigconstant(_ozymandias)
UCHAR = _ozymandias.UCHAR

_ozymandias.UINT8_swigconstant(_ozymandias)
UINT8 = _ozymandias.UINT8

_ozymandias.CHAR_swigconstant(_ozymandias)
CHAR = _ozymandias.CHAR

_ozymandias.INT8_swigconstant(_ozymandias)
INT8 = _ozymandias.INT8

_ozymandias.USHORT_swigconstant(_ozymandias)
USHORT = _ozymandias.USHORT

_ozymandias.UINT16_swigconstant(_ozymandias)
UINT16 = _ozymandias.UINT16

_ozymandias.SHORT_swigconstant(_ozymandias)
SHORT = _ozymandias.SHORT

_ozymandias.INT16_swigconstant(_ozymandias)
INT16 = _ozymandias.INT16

_ozymandias.UINT_swigconstant(_ozymandias)
UINT = _ozymandias.UINT

_ozymandias.UINT32_swigconstant(_ozymandias)
UINT32 = _ozymandias.UINT32

_ozymandias.INT_swigconstant(_ozymandias)
INT = _ozymandias.INT

_ozymandias.INT32_swigconstant(_ozymandias)
INT32 = _ozymandias.INT32

_ozymandias.ULONGLONG_swigconstant(_ozymandias)
ULONGLONG = _ozymandias.ULONGLONG

_ozymandias.UINT64_swigconstant(_ozymandias)
UINT64 = _ozymandias.UINT64

_ozymandias.LONGLONG_swigconstant(_ozymandias)
LONGLONG = _ozymandias.LONGLONG

_ozymandias.INT64_swigconstant(_ozymandias)
INT64 = _ozymandias.INT64

_ozymandias.HALF_swigconstant(_ozymandias)
HALF = _ozymandias.HALF

_ozymandias.FLOAT_swigconstant(_ozymandias)
FLOAT = _ozymandias.FLOAT

_ozymandias.DOUBLE_swigconstant(_ozymandias)
DOUBLE = _ozymandias.DOUBLE

_ozymandias.STRING_swigconstant(_ozymandias)
STRING = _ozymandias.STRING

_ozymandias.PTR_swigconstant(_ozymandias)
PTR = _ozymandias.PTR

_ozymandias.LASTBASE_swigconstant(_ozymandias)
LASTBASE = _ozymandias.LASTBASE

_ozymandias.SCALAR_swigconstant(_ozymandias)
SCALAR = _ozymandias.SCALAR

_ozymandias.VEC2_swigconstant(_ozymandias)
VEC2 = _ozymandias.VEC2

_ozymandias.VEC3_swigconstant(_ozymandias)
VEC3 = _ozymandias.VEC3

_ozymandias.VEC4_swigconstant(_ozymandias)
VEC4 = _ozymandias.VEC4

_ozymandias.MATRIX44_swigconstant(_ozymandias)
MATRIX44 = _ozymandias.MATRIX44

_ozymandias.NOXFORM_swigconstant(_ozymandias)
NOXFORM = _ozymandias.NOXFORM

_ozymandias.NOSEMANTICS_swigconstant(_ozymandias)
NOSEMANTICS = _ozymandias.NOSEMANTICS

_ozymandias.COLOR_swigconstant(_ozymandias)
COLOR = _ozymandias.COLOR

_ozymandias.POINT_swigconstant(_ozymandias)
POINT = _ozymandias.POINT

_ozymandias.VECTOR_swigconstant(_ozymandias)
VECTOR = _ozymandias.VECTOR

_ozymandias.NORMAL_swigconstant(_ozymandias)
NORMAL = _ozymandias.NORMAL

_ozymandias.TIMECODE_swigconstant(_ozymandias)
TIMECODE = _ozymandias.TIMECODE

_ozymandias.KEYCODE_swigconstant(_ozymandias)
KEYCODE = _ozymandias.KEYCODE
class OzyProgressBucketDoneMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OzyProgressBucketDoneMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OzyProgressBucketDoneMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bucket_id"] = _ozymandias.OzyProgressBucketDoneMessage_bucket_id_set
    __swig_getmethods__["bucket_id"] = _ozymandias.OzyProgressBucketDoneMessage_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_ozymandias.OzyProgressBucketDoneMessage_bucket_id_get, _ozymandias.OzyProgressBucketDoneMessage_bucket_id_set)
    __swig_setmethods__["num_buckets"] = _ozymandias.OzyProgressBucketDoneMessage_num_buckets_set
    __swig_getmethods__["num_buckets"] = _ozymandias.OzyProgressBucketDoneMessage_num_buckets_get
    if _newclass:
        num_buckets = _swig_property(_ozymandias.OzyProgressBucketDoneMessage_num_buckets_get, _ozymandias.OzyProgressBucketDoneMessage_num_buckets_set)
    __swig_setmethods__["num_done"] = _ozymandias.OzyProgressBucketDoneMessage_num_done_set
    __swig_getmethods__["num_done"] = _ozymandias.OzyProgressBucketDoneMessage_num_done_get
    if _newclass:
        num_done = _swig_property(_ozymandias.OzyProgressBucketDoneMessage_num_done_get, _ozymandias.OzyProgressBucketDoneMessage_num_done_set)

    def __init__(self):
        this = _ozymandias.new_OzyProgressBucketDoneMessage()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_OzyProgressBucketDoneMessage
    __del__ = lambda self: None
OzyProgressBucketDoneMessage_swigregister = _ozymandias.OzyProgressBucketDoneMessage_swigregister
OzyProgressBucketDoneMessage_swigregister(OzyProgressBucketDoneMessage)
cvar = _ozymandias.cvar
ozy_pass_channels = cvar.ozy_pass_channels

class OzyShot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OzyShot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OzyShot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subsamples_per_thread"] = _ozymandias.OzyShot_subsamples_per_thread_set
    __swig_getmethods__["subsamples_per_thread"] = _ozymandias.OzyShot_subsamples_per_thread_get
    if _newclass:
        subsamples_per_thread = _swig_property(_ozymandias.OzyShot_subsamples_per_thread_get, _ozymandias.OzyShot_subsamples_per_thread_set)
    __swig_setmethods__["width"] = _ozymandias.OzyShot_width_set
    __swig_getmethods__["width"] = _ozymandias.OzyShot_width_get
    if _newclass:
        width = _swig_property(_ozymandias.OzyShot_width_get, _ozymandias.OzyShot_width_set)
    __swig_setmethods__["height"] = _ozymandias.OzyShot_height_set
    __swig_getmethods__["height"] = _ozymandias.OzyShot_height_get
    if _newclass:
        height = _swig_property(_ozymandias.OzyShot_height_get, _ozymandias.OzyShot_height_set)
    __swig_setmethods__["bucket_resolution"] = _ozymandias.OzyShot_bucket_resolution_set
    __swig_getmethods__["bucket_resolution"] = _ozymandias.OzyShot_bucket_resolution_get
    if _newclass:
        bucket_resolution = _swig_property(_ozymandias.OzyShot_bucket_resolution_get, _ozymandias.OzyShot_bucket_resolution_set)
    __swig_setmethods__["pass_enabled"] = _ozymandias.OzyShot_pass_enabled_set
    __swig_getmethods__["pass_enabled"] = _ozymandias.OzyShot_pass_enabled_get
    if _newclass:
        pass_enabled = _swig_property(_ozymandias.OzyShot_pass_enabled_get, _ozymandias.OzyShot_pass_enabled_set)

    def __init__(self):
        this = _ozymandias.new_OzyShot()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_OzyShot
    __del__ = lambda self: None
OzyShot_swigregister = _ozymandias.OzyShot_swigregister
OzyShot_swigregister(OzyShot)


def ozy_render(result, shot, scene, workers, callback, context):
    return _ozymandias.ozy_render(result, shot, scene, workers, callback, context)
ozy_render = _ozymandias.ozy_render

def ozy_result_create():
    return _ozymandias.ozy_result_create()
ozy_result_create = _ozymandias.ozy_result_create

def ozy_result_destroy(result):
    return _ozymandias.ozy_result_destroy(result)
ozy_result_destroy = _ozymandias.ozy_result_destroy

def ozy_result_save_to_file(result, fn, format, colorspace):
    return _ozymandias.ozy_result_save_to_file(result, fn, format, colorspace)
ozy_result_save_to_file = _ozymandias.ozy_result_save_to_file

def ozy_result_get_pass(result, arg2, buffer):
    return _ozymandias.ozy_result_get_pass(result, arg2, buffer)
ozy_result_get_pass = _ozymandias.ozy_result_get_pass

def ozy_result_get_num_completed_buckets(result):
    return _ozymandias.ozy_result_get_num_completed_buckets(result)
ozy_result_get_num_completed_buckets = _ozymandias.ozy_result_get_num_completed_buckets

def ozy_result_get_bucket(result, arg2, bucket_index, buffer):
    return _ozymandias.ozy_result_get_bucket(result, arg2, bucket_index, buffer)
ozy_result_get_bucket = _ozymandias.ozy_result_get_bucket

def ozy_result_get_width(result):
    return _ozymandias.ozy_result_get_width(result)
ozy_result_get_width = _ozymandias.ozy_result_get_width

def ozy_result_get_height(result):
    return _ozymandias.ozy_result_get_height(result)
ozy_result_get_height = _ozymandias.ozy_result_get_height

def ozy_result_get_bucket_width(result, bucket_id):
    return _ozymandias.ozy_result_get_bucket_width(result, bucket_id)
ozy_result_get_bucket_width = _ozymandias.ozy_result_get_bucket_width

def ozy_result_get_bucket_height(result, bucket_id):
    return _ozymandias.ozy_result_get_bucket_height(result, bucket_id)
ozy_result_get_bucket_height = _ozymandias.ozy_result_get_bucket_height

def ozy_result_get_num_buckets_x(result):
    return _ozymandias.ozy_result_get_num_buckets_x(result)
ozy_result_get_num_buckets_x = _ozymandias.ozy_result_get_num_buckets_x

def ozy_result_get_num_buckets_y(result):
    return _ozymandias.ozy_result_get_num_buckets_y(result)
ozy_result_get_num_buckets_y = _ozymandias.ozy_result_get_num_buckets_y

def ozy_workers_create(num_workers):
    return _ozymandias.ozy_workers_create(num_workers)
ozy_workers_create = _ozymandias.ozy_workers_create

def ozy_workers_destroy(workers):
    return _ozymandias.ozy_workers_destroy(workers)
ozy_workers_destroy = _ozymandias.ozy_workers_destroy

def ozy_scene_create():
    return _ozymandias.ozy_scene_create()
ozy_scene_create = _ozymandias.ozy_scene_create

def ozy_scene_destroy(scene):
    return _ozymandias.ozy_scene_destroy(scene)
ozy_scene_destroy = _ozymandias.ozy_scene_destroy

def ozy_scene_add_object(scene, num_verts, num_normals, num_uvs, num_tris):
    return _ozymandias.ozy_scene_add_object(scene, num_verts, num_normals, num_uvs, num_tris)
ozy_scene_add_object = _ozymandias.ozy_scene_add_object

def ozy_scene_obj_set_verts(scene, obj, verts):
    return _ozymandias.ozy_scene_obj_set_verts(scene, obj, verts)
ozy_scene_obj_set_verts = _ozymandias.ozy_scene_obj_set_verts

def ozy_scene_obj_set_tris(scene, obj, tris):
    return _ozymandias.ozy_scene_obj_set_tris(scene, obj, tris)
ozy_scene_obj_set_tris = _ozymandias.ozy_scene_obj_set_tris

def ozy_scene_obj_set_normals(scene, obj, normals):
    return _ozymandias.ozy_scene_obj_set_normals(scene, obj, normals)
ozy_scene_obj_set_normals = _ozymandias.ozy_scene_obj_set_normals

def ozy_scene_obj_set_uvs(scene, obj, uvs):
    return _ozymandias.ozy_scene_obj_set_uvs(scene, obj, uvs)
ozy_scene_obj_set_uvs = _ozymandias.ozy_scene_obj_set_uvs

def ozy_scene_obj_set_tri_materials(scene, obj, tri_materials):
    return _ozymandias.ozy_scene_obj_set_tri_materials(scene, obj, tri_materials)
ozy_scene_obj_set_tri_materials = _ozymandias.ozy_scene_obj_set_tri_materials

def ozy_scene_obj_set_tri_normals(scene, obj, tri_normals):
    return _ozymandias.ozy_scene_obj_set_tri_normals(scene, obj, tri_normals)
ozy_scene_obj_set_tri_normals = _ozymandias.ozy_scene_obj_set_tri_normals

def ozy_scene_obj_set_tri_uvs(scene, obj, tri_uvs):
    return _ozymandias.ozy_scene_obj_set_tri_uvs(scene, obj, tri_uvs)
ozy_scene_obj_set_tri_uvs = _ozymandias.ozy_scene_obj_set_tri_uvs

def ozy_scene_obj_set_transform(scene, obj, mat):
    return _ozymandias.ozy_scene_obj_set_transform(scene, obj, mat)
ozy_scene_obj_set_transform = _ozymandias.ozy_scene_obj_set_transform

def ozy_scene_add_material(scene, shader, emit):
    return _ozymandias.ozy_scene_add_material(scene, shader, emit)
ozy_scene_add_material = _ozymandias.ozy_scene_add_material

def ozy_scene_material_set_float_param(scene, material, name, val):
    return _ozymandias.ozy_scene_material_set_float_param(scene, material, name, val)
ozy_scene_material_set_float_param = _ozymandias.ozy_scene_material_set_float_param

def ozy_scene_material_set_color_param(scene, material, name, val):
    return _ozymandias.ozy_scene_material_set_color_param(scene, material, name, val)
ozy_scene_material_set_color_param = _ozymandias.ozy_scene_material_set_color_param

def ozy_scene_set_camera(scene, transform, fov):
    return _ozymandias.ozy_scene_set_camera(scene, transform, fov)
ozy_scene_set_camera = _ozymandias.ozy_scene_set_camera

def ozy_get_shader_info(filename):
    return _ozymandias.ozy_get_shader_info(filename)
ozy_get_shader_info = _ozymandias.ozy_get_shader_info

def ozy_free_shader_info(info):
    return _ozymandias.ozy_free_shader_info(info)
ozy_free_shader_info = _ozymandias.ozy_free_shader_info
class Scene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _ozymandias.new_Scene()
        try:
            self.this.append(this)
        except:
            self.this = this

    def destroy(self):
        return _ozymandias.Scene_destroy(self)

    def add_object(self, num_verts, num_normals, num_uvs, num_tris):
        return _ozymandias.Scene_add_object(self, num_verts, num_normals, num_uvs, num_tris)

    def obj_set_transform(self, obj, mat):
        return _ozymandias.Scene_obj_set_transform(self, obj, mat)

    def add_material(self, shader, emit):
        return _ozymandias.Scene_add_material(self, shader, emit)

    def material_set_float_param(self, material, name, val):
        return _ozymandias.Scene_material_set_float_param(self, material, name, val)

    def material_set_color_param(self, material, name, val):
        return _ozymandias.Scene_material_set_color_param(self, material, name, val)

    def set_camera(self, transform, fov):
        return _ozymandias.Scene_set_camera(self, transform, fov)
    __swig_setmethods__["scene"] = _ozymandias.Scene_scene_set
    __swig_getmethods__["scene"] = _ozymandias.Scene_scene_get
    if _newclass:
        scene = _swig_property(_ozymandias.Scene_scene_get, _ozymandias.Scene_scene_set)

    def obj_set_verts(self, *args):
        return _ozymandias.Scene_obj_set_verts(self, *args)

    def obj_set_normals(self, *args):
        return _ozymandias.Scene_obj_set_normals(self, *args)

    def obj_set_uvs(self, *args):
        return _ozymandias.Scene_obj_set_uvs(self, *args)

    def obj_set_tris(self, *args):
        return _ozymandias.Scene_obj_set_tris(self, *args)

    def obj_set_tri_normals(self, *args):
        return _ozymandias.Scene_obj_set_tri_normals(self, *args)

    def obj_set_tri_uvs(self, *args):
        return _ozymandias.Scene_obj_set_tri_uvs(self, *args)

    def obj_set_tri_materials(self, *args):
        return _ozymandias.Scene_obj_set_tri_materials(self, *args)
    __swig_destroy__ = _ozymandias.delete_Scene
    __del__ = lambda self: None
Scene_swigregister = _ozymandias.Scene_swigregister
Scene_swigregister(Scene)

class Workers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Workers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Workers, name)
    __repr__ = _swig_repr

    def __init__(self, num_workers):
        this = _ozymandias.new_Workers(num_workers)
        try:
            self.this.append(this)
        except:
            self.this = this

    def destroy(self):
        return _ozymandias.Workers_destroy(self)
    __swig_setmethods__["workers"] = _ozymandias.Workers_workers_set
    __swig_getmethods__["workers"] = _ozymandias.Workers_workers_get
    if _newclass:
        workers = _swig_property(_ozymandias.Workers_workers_get, _ozymandias.Workers_workers_set)
    __swig_destroy__ = _ozymandias.delete_Workers
    __del__ = lambda self: None
Workers_swigregister = _ozymandias.Workers_swigregister
Workers_swigregister(Workers)

class Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _ozymandias.new_Result()
        try:
            self.this.append(this)
        except:
            self.this = this

    def destroy(self):
        return _ozymandias.Result_destroy(self)

    def save_to_file(self, fn, format, colorspace):
        return _ozymandias.Result_save_to_file(self, fn, format, colorspace)

    def get_num_completed_buckets(self):
        return _ozymandias.Result_get_num_completed_buckets(self)

    def get_width(self):
        return _ozymandias.Result_get_width(self)

    def get_height(self):
        return _ozymandias.Result_get_height(self)

    def get_bucket_width(self, bucket_id):
        return _ozymandias.Result_get_bucket_width(self, bucket_id)

    def get_bucket_height(self, bucket_id):
        return _ozymandias.Result_get_bucket_height(self, bucket_id)

    def get_num_buckets_x(self):
        return _ozymandias.Result_get_num_buckets_x(self)

    def get_num_buckets_y(self):
        return _ozymandias.Result_get_num_buckets_y(self)
    __swig_setmethods__["result"] = _ozymandias.Result_result_set
    __swig_getmethods__["result"] = _ozymandias.Result_result_get
    if _newclass:
        result = _swig_property(_ozymandias.Result_result_get, _ozymandias.Result_result_set)

    def get_pass(self, *args):
        return _ozymandias.Result_get_pass(self, *args)

    def get_bucket(self, *args):
        return _ozymandias.Result_get_bucket(self, *args)
    __swig_destroy__ = _ozymandias.delete_Result
    __del__ = lambda self: None
Result_swigregister = _ozymandias.Result_swigregister
Result_swigregister(Result)

class ProgressCallbackData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressCallbackData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressCallbackData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _ozymandias.ProgressCallbackData_data_set
    __swig_getmethods__["data"] = _ozymandias.ProgressCallbackData_data_get
    if _newclass:
        data = _swig_property(_ozymandias.ProgressCallbackData_data_get, _ozymandias.ProgressCallbackData_data_set)
    __swig_setmethods__["callback"] = _ozymandias.ProgressCallbackData_callback_set
    __swig_getmethods__["callback"] = _ozymandias.ProgressCallbackData_callback_get
    if _newclass:
        callback = _swig_property(_ozymandias.ProgressCallbackData_callback_get, _ozymandias.ProgressCallbackData_callback_set)

    def __init__(self):
        this = _ozymandias.new_ProgressCallbackData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_ProgressCallbackData
    __del__ = lambda self: None
ProgressCallbackData_swigregister = _ozymandias.ProgressCallbackData_swigregister
ProgressCallbackData_swigregister(ProgressCallbackData)

class Shot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subsamples_per_thread"] = _ozymandias.Shot_subsamples_per_thread_set
    __swig_getmethods__["subsamples_per_thread"] = _ozymandias.Shot_subsamples_per_thread_get
    if _newclass:
        subsamples_per_thread = _swig_property(_ozymandias.Shot_subsamples_per_thread_get, _ozymandias.Shot_subsamples_per_thread_set)
    __swig_setmethods__["width"] = _ozymandias.Shot_width_set
    __swig_getmethods__["width"] = _ozymandias.Shot_width_get
    if _newclass:
        width = _swig_property(_ozymandias.Shot_width_get, _ozymandias.Shot_width_set)
    __swig_setmethods__["height"] = _ozymandias.Shot_height_set
    __swig_getmethods__["height"] = _ozymandias.Shot_height_get
    if _newclass:
        height = _swig_property(_ozymandias.Shot_height_get, _ozymandias.Shot_height_set)
    __swig_setmethods__["bucket_resolution"] = _ozymandias.Shot_bucket_resolution_set
    __swig_getmethods__["bucket_resolution"] = _ozymandias.Shot_bucket_resolution_get
    if _newclass:
        bucket_resolution = _swig_property(_ozymandias.Shot_bucket_resolution_get, _ozymandias.Shot_bucket_resolution_set)
    __swig_setmethods__["pass_enabled"] = _ozymandias.Shot_pass_enabled_set
    __swig_getmethods__["pass_enabled"] = _ozymandias.Shot_pass_enabled_get
    if _newclass:
        pass_enabled = _swig_property(_ozymandias.Shot_pass_enabled_get, _ozymandias.Shot_pass_enabled_set)

    def enable_pass(self, arg2):
        return _ozymandias.Shot_enable_pass(self, arg2)

    def disable_pass(self, arg2):
        return _ozymandias.Shot_disable_pass(self, arg2)

    def get_pass_enabled(self, arg2):
        return _ozymandias.Shot_get_pass_enabled(self, arg2)

    def __init__(self):
        this = _ozymandias.new_Shot()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_Shot
    __del__ = lambda self: None
Shot_swigregister = _ozymandias.Shot_swigregister
Shot_swigregister(Shot)


def _render(result, shot, scene, workers, callback, context):
    return _ozymandias._render(result, shot, scene, workers, callback, context)
_render = _ozymandias._render
class ShaderParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _ozymandias.ShaderParameter_param_set
    __swig_getmethods__["param"] = _ozymandias.ShaderParameter_param_get
    if _newclass:
        param = _swig_property(_ozymandias.ShaderParameter_param_get, _ozymandias.ShaderParameter_param_set)

    def get_basetype(self):
        return _ozymandias.ShaderParameter_get_basetype(self)

    def get_aggregate(self):
        return _ozymandias.ShaderParameter_get_aggregate(self)

    def get_vecsemantics(self):
        return _ozymandias.ShaderParameter_get_vecsemantics(self)

    def get_name(self):
        return _ozymandias.ShaderParameter_get_name(self)

    def __init__(self):
        this = _ozymandias.new_ShaderParameter()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_ShaderParameter
    __del__ = lambda self: None
ShaderParameter_swigregister = _ozymandias.ShaderParameter_swigregister
ShaderParameter_swigregister(ShaderParameter)

class ShaderInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _ozymandias.ShaderInfo_info_set
    __swig_getmethods__["info"] = _ozymandias.ShaderInfo_info_get
    if _newclass:
        info = _swig_property(_ozymandias.ShaderInfo_info_get, _ozymandias.ShaderInfo_info_set)

    def __init__(self, filename):
        this = _ozymandias.new_ShaderInfo(filename)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_ShaderInfo
    __del__ = lambda self: None

    def get_param(self, i):
        return _ozymandias.ShaderInfo_get_param(self, i)

    def num_params(self):
        return _ozymandias.ShaderInfo_num_params(self)

    def is_valid(self):
        return _ozymandias.ShaderInfo_is_valid(self)
ShaderInfo_swigregister = _ozymandias.ShaderInfo_swigregister
ShaderInfo_swigregister(ShaderInfo)

class Vec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _ozymandias.Vec3_v_set
    __swig_getmethods__["v"] = _ozymandias.Vec3_v_get
    if _newclass:
        v = _swig_property(_ozymandias.Vec3_v_get, _ozymandias.Vec3_v_set)

    def __init__(self):
        this = _ozymandias.new_Vec3()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_Vec3
    __del__ = lambda self: None
Vec3_swigregister = _ozymandias.Vec3_swigregister
Vec3_swigregister(Vec3)

class Matrix3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _ozymandias.Matrix3_m_set
    __swig_getmethods__["m"] = _ozymandias.Matrix3_m_get
    if _newclass:
        m = _swig_property(_ozymandias.Matrix3_m_get, _ozymandias.Matrix3_m_set)

    def __init__(self):
        this = _ozymandias.new_Matrix3()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_Matrix3
    __del__ = lambda self: None
Matrix3_swigregister = _ozymandias.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

class Matrix4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _ozymandias.Matrix4_m_set
    __swig_getmethods__["m"] = _ozymandias.Matrix4_m_get
    if _newclass:
        m = _swig_property(_ozymandias.Matrix4_m_get, _ozymandias.Matrix4_m_set)

    def __init__(self):
        this = _ozymandias.new_Matrix4()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ozymandias.delete_Matrix4
    __del__ = lambda self: None
Matrix4_swigregister = _ozymandias.Matrix4_swigregister
Matrix4_swigregister(Matrix4)


def render(result, shot, scene, workers, func, context):
    return _ozymandias.render(result, shot, scene, workers, func, context)
render = _ozymandias.render
# This file is compatible with both classic and new-style classes.


